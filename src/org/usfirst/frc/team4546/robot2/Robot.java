// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team4546.robot2;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.Timer;

import org.usfirst.frc.team4546.robot2.commands.*;
import org.usfirst.frc.team4546.robot2.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser autoChooser;
    
    public static OI oi;
    public static Drivetrain drivetrain;
    public static Lift lift;
    public static Claw claw;
    public static PowerDistributionPanel pdp;
    public AHRS gyro;
    
    public Preferences prefs;
    
    public static double speed;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
        drivetrain = new Drivetrain();
        lift = new Lift();
        claw = new Claw();
        pdp = RobotMap.pdp;
        gyro = RobotMap.gyro;
        speed = 1;
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();
        pdp.clearStickyFaults();

        autoChooser = new SendableChooser();
        autoChooser.addDefault("No Auto", null);
        autoChooser.addObject("Straight Auto, No Ramp", new StraightAutoNoRamp());
        autoChooser.addObject("Straight Auto With Ramp", new StraightAutoWithRamp());
        autoChooser.addObject("Stacking Auto", new StackingAuto());
        autoChooser.addObject("Sideways Auto CCW", new SidewaysAutoLeft());
        autoChooser.addObject("Sideways Auto CW", new SidewaysAutoRight());
        autoChooser.addObject("Sideway Auto CCW With Ramp", new SidewaysAutoLeftRamp());
        autoChooser.addObject("Sideways Auto CW With Ramp", new SidewaysAutoRightRamp());
        
        SmartDashboard.putData("Auto Chooser", autoChooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	
    	claw.open();
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {

    	autonomousCommand = (Command) autoChooser.getSelected();
    	if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();

    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Speed %", Robot.speed*100);
        SmartDashboard.putBoolean("Claw Status", Robot.claw.isClosed());
        SmartDashboard.putBoolean("Lift Fully Up", Robot.lift.isFullyUp());
        SmartDashboard.putBoolean("Lift Fully Down", Robot.lift.isFullyDown());
        
        SmartDashboard.putData(drivetrain);
        SmartDashboard.putData(lift);
        SmartDashboard.putData(claw);
   
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();

    }
}
